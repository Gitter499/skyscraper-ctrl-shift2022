/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
author: jemepousse (https://sketchfab.com/jemepousse)
license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
source: https://sketchfab.com/models/356c773c4b9a45d8b9d4aa04c60ecb27
title: Red City
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
  nodes: {
    mesh_0: THREE.Mesh
    mesh_1: THREE.Mesh
    mesh_2: THREE.Mesh
    mesh_3: THREE.Mesh
  }
  materials: {
    Scene_Root: THREE.MeshBasicMaterial
  }
}

export default function CityScene({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<any>()
  const { nodes, materials } = useGLTF('/scene-draco-transformed.glb') as unknown as GLTFResult

  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.position.x = Math.sin(t / 4)
    const y = Math.sin(t / 8) * 0.9
    group.current.rotation.y = y
  })
  return (
    <group ref={group} {...props} scale={0.0001} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]}>
        <group position={[-102253.52, -210688.86, -17050.52]}>
          <mesh geometry={nodes.mesh_0.geometry} material={materials.Scene_Root} />
          <mesh geometry={nodes.mesh_1.geometry} material={materials.Scene_Root} />
          <mesh geometry={nodes.mesh_2.geometry} material={materials.Scene_Root} />
          <mesh geometry={nodes.mesh_3.geometry} material={materials.Scene_Root} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/scene-draco-transformed.glb')
